/* ==========================================================================
   Guss: columns
   ========================================================================== */

/**
 * A "columns pattern" will fit as many "$guss-column-min-width"-wide columns
 * in any type of context: full-width container, sidebar…
 *
 * Usage 1: Sass mixin
 * @include guss-columns('.classname');
 * Examples: http://sassmeister.com/gist/35288593dc035ef645e1
 *
 * Usage 2: utility class set as `$guss-columns-utility-class`
 * @include guss-columns-utility;
 *
 * <div class="l-columns">
 *     <div class="l-columns__item"></div>
 *     <div class="l-columns__item"></div>
 *     <div class="l-columns__item"></div>
 *     <div class="l-columns__item"></div>
 *     <div class="l-columns__item"></div>
 *     <div class="l-columns__item"></div>
 *     <div class="l-columns__item"></div>
 * </div>
 *
 */

$guss-column-min-width: 300px !default;
$guss-column-gap: 20px !default;

$guss-columns-utility-class: '.l-columns';

// When set to false, output a simpler version with a static width
// http://caniuse.com/#feat=multicolumn
$browser-supports-columns: true !default;

// Fallback width when CSS3 columns support is disabled
$guss-columns-fallback-width: 940px !default;

// Number of columns in the non-responsive version
$guss-columns-fallback-columns: 3 !default;

@function width-of-fallback-column-item($container-width, $gap-between-columns, $number-of-columns) {
    @return ($container-width - $gap-between-columns * ($number-of-columns - 1)) / $number-of-columns;
}

@mixin guss-columns($base-class,
                    $column-min-width: $guss-column-min-width,
                    $column-gap: $guss-column-gap,
                    $columns-fallback-width: $guss-columns-fallback-width,
                    $columns-fallback-columns: $guss-columns-fallback-columns,
                    $css3-columns-support: $browser-supports-columns) {
    @if $css3-columns-support {
        #{$base-class} {
            -webkit-column-width: rem($column-min-width);
            -webkit-column-gap: rem($column-gap);
            -webkit-column-fill: balance;

            -moz-column-width: rem($column-min-width);
            -moz-column-gap: rem($column-gap);
            -moz-column-fill: balance;

            column-width: rem($column-min-width);
            column-gap: rem($column-gap);
            column-fill: balance;
        }
        #{$base-class}__item {
            // Fix a bug in IE where hovering items would change
            // the column container's height
            height: 100%;

            // `column-break-inside: avoid;` does not work in all browsers
            // so we use `display: inline-block;` instead
            // -webkit-column-break-inside: avoid;
            //    -moz-column-break-inside: avoid;
            //         column-break-inside: avoid;
            display: inline-block;
            width: 100%;
        }
    }
    @if not $css3-columns-support {
        #{$base-class} {
            @include rem((
                margin-left: $column-gap / 2 * -1,
                margin-right: $column-gap / 2 * -1
            ));

            // Micro clearfix (http://nicolasgallagher.com/micro-clearfix-hack/)
            zoom: 1;

            &:after,
            &:before {
                content: '';
                display: table;
            }
            &:after {
                clear: both;
            }
        }
        #{$base-class}__item {
            position: relative;
            display: block;
            @include rem((
                margin-left: $column-gap / 2,
                margin-right: $column-gap / 2
            ));

            @include mq(tablet) {
                float: left;
            }

            @if type-of($columns-fallback-width) == map {
                // Author has specified various fallbacks depending on the breakpoint.
                // Note: breakpoints refer to names given to screen sizes in sass-mq
                // 
                // @include guss-columns(
                //     (…)
                //     $columns-fallback-width: (
                //         tablet: gs-span(9),
                //         desktop: gs-span(12)
                //     ),
                //     $columns-fallback-columns: (
                //         tablet: 2,
                //         desktop: 3
                //     )
                // );
                @each $breakpoint, $fallback-width in $columns-fallback-width {

                    $number-of-fallback-columns: if(type-of($columns-fallback-columns) == map, map-get($columns-fallback-columns, $breakpoint), $columns-fallback-columns);

                    @include mq($breakpoint) {
                        @include rem((
                            width: width-of-fallback-column-item(
                                                                    $container-width: $fallback-width,
                                                                    $gap-between-columns: $column-gap,
                                                                    $number-of-columns: $number-of-fallback-columns
                                                                )
                        ));

                        &:nth-child(n) {
                            clear: none;
                        }
                        &:nth-child(#{$number-of-fallback-columns}n+1) {
                            clear: both;
                        }
                    }

                }
            } @else {
                // Author specified a single fallback width, that applies to all breakpoints
                // 
                // @include guss-columns(
                //     (…)
                //     $columns-fallback-width: 290px,
                //     $columns-fallback-columns: 3
                // );
                @include rem((
                    width: width-of-fallback-column-item(
                                                            $container-width: $columns-fallback-width,
                                                            $gap-between-columns: $column-gap,
                                                            $number-of-columns: $columns-fallback-columns
                                                        )
                ));

                &:nth-child(n) {
                    clear: none;
                }
                &:nth-child(#{$columns-fallback-columns}n+1) {
                    clear: both;
                }
            }
        }
    }
}

@mixin guss-columns-utility {
    @include guss-columns($guss-columns-utility-class);
}
