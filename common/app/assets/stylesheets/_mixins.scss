@import 'components/sass-mq/_mq';

// Guss - https://github.com/guardian/guss
// =============================================================================

@import 'components/guss-rem/_rem';
@import 'components/guss-typography/_helpers';
@import 'components/guss-typography/_font-scale';
@import 'components/guss-css3/_css3';
@import 'components/guss-layout/_columns';
@import 'components/guss-layout/_row';

// The grid system is already imported in the _vars.scss file where it's needed
// @import 'components/guss-grid-system/_grid-system';

// CSS helpers
// =============================================================================

// Transparent background with fallback for older browsers
@mixin transparent-background($color, $opacity) {
    background-color: $color;
    background-color: rgba($color, $opacity);
}

// Vertical linear gradient with a plain fallback for older browsers
@mixin simple-gradient($from, $to) {
    // Fix for browsers not understanding transparent
    @if $from == transparent {
        $from: transparentize($to, 1);
    }

    @if $to == transparent {
        $to: transparentize($from, 1);
    }
    background-color: $from;
    background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from($from), to($to));
    background-image: -webkit-linear-gradient($from, $to);
    background-image: linear-gradient(to bottom, $from, $to);
}

@function aspect-ratio-height($x, $y, $startingWidth: 100%) {
    @return ($y / $x) * $startingWidth;
}

@mixin fix-aspect-ratio($x, $y, $startingWidth: 100%) {
    // To get this working, position the child element
    // to 'absolute' in the top left corner
    width: $startingWidth;
    padding-bottom: aspect-ratio-height($x, $y, $startingWidth);
    position: relative;
    overflow: hidden;
}

@mixin faux-bullet-point($color: $c-neutral3, $right-space: 2px) {
    &:before {
        display: inline-block;
        content: '';
        @include border-radius(6px);
        @include rem((
            height: 12px,
            width: 12px,
            margin-right: $right-space
        ));
        background-color: $color;
    }
}

// Hide content visually, still readable by screen readers
@mixin u-h {
    border: 0 !important;
    clip: rect(0 0 0 0) !important;
    height: 1px !important;
    margin: -1px !important;
    overflow: hidden !important;
    padding: 0 !important;
    position: absolute !important;
    width: 1px !important;
}

// Clamps a block of text to a certain number of lines,
// followed by an ellipsis in Webkit and Blink based browsers
// Reference: http://dropshado.ws/post/1015351370/webkit-line-clamp
@mixin text-clamp($lines: 2, $line-height: false) {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $lines;

    // Fallback for non-Webkit browsers
    // (won't show `â€¦` at the end of the block)
    @if $line-height {
        @include rem((
            max-height: $line-height * $lines
        ));
    }
}

// icon button (circular element containing an offset/centered icon)
@mixin icon-button($buttonSize, $iconOffsetX, $iconOffsetY: null) {
    width: $buttonSize;
    height: $buttonSize;
    @include border-radius($buttonSize);
    position: relative;
    display: inline-block;

    .i {
        position: absolute;
        text-indent: -9999px;
        top: 50%;
        left: 50%;
        margin-top: $iconOffsetX;
        margin-left: if(not $iconOffsetY, $iconOffsetX, $iconOffsetY);
    }
}

@mixin icon($name) {
    @extend %i;
    @extend %i-#{$name};

    @if ($svg-support) {
        .svg & {
            @extend %svg-i-#{$name};
        }
    }
}

// Micro clearfix (http://nicolasgallagher.com/micro-clearfix-hack/)
@mixin clearfix {
    &:after,
    &:before {
        content: '';
        display: table;
    }
    &:after {
        clear: both;
    }
    @if $old-ie {
        zoom: 1;
    }
}

@mixin full-bleed($color) {
    $bgWidth: 10000px;
    background-color: $color;

    &:before,
    &:after {
        @include box-sizing(border-box);
        content: ' ';
        background-color: $color;
        position: absolute;
        top: 0;
        height: 100%;
        width: $bgWidth;
    }
    &:before {
        right: 100%;
    }
    &:after {
        left: 100%;
    }
}
