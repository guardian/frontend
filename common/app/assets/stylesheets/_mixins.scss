@import "_mq";

// Transform a value into rem
// Assuming baseline is set to 10px on :root/html
@function rem($value, $baseline: 10px) {
    @if $value == 0 { @return 0; } // 0rem -> 0
    @if type-of($value) == list {
        $result: ();
        @each $e in $value {
            $result: append($result, rem($e));
        }
        @return $result;
    } @else {
        @return if(type-of($value) == number and unit($value) == px, $value / $baseline * 1rem, $value);
    }
}

// Output rem units with px fallback
// Expects $properties to be a Sass map
// Usage: see font-size mixin below
// or http://sassmeister.com/gist/7451284
@mixin rem($properties) {
    @each $property, $value in $properties {
        @if (type-of($value) == number and $value != 0) {
            // Turn any value into pixels
            $value: if(unitless($value), $value * 1px, $value);
        }

        #{$property}: $value;
        #{$property}: rem($value);
    }
}


// Font Helpers
// =============================================================================

@mixin font-size($size, $line-height: $size) {
    @include rem((
        font-size: $size,
        line-height: $line-height
    ));
}

// Use only if necessary, prefer usage of the font-scale
@mixin font($family, $weight, $size, $line-height: $size) {
    font-family: $family;
    font-weight: $weight;
    @include font-size($size, $line-height);
}


// Font Scale
// =============================================================================

// Prefixes:
// f- stands for Font: use to set a font-family only
// fs- for Font Scale: see documentation in docs/design/font-scale.jpg

@mixin f-header {
    font-family: $serifheadline;
    font-weight: 900;
    -webkit-font-smoothing: antialiased;
}
@mixin fs-header($level, $size-only: false) {
    $header: nth($fs-headers, $level);

    @include font-size(nth($header, 1), nth($header, 2));

    @if $size-only == false {
        @include f-header;
    }
}

@mixin f-headline {
    font-family: $serifheadline;
    font-weight: normal;
    -webkit-font-smoothing: antialiased;
}
@mixin fs-headline($level, $size-only: false) {
    $headline: nth($fs-headlines, $level);

    @include font-size(nth($headline, 1), nth($headline, 2));

    @if $size-only == false {
        @include f-headline;
    }
}

@mixin f-bodyHeading {
    font-family: $serif;
    font-weight: bold;
    -webkit-font-smoothing: subpixel-antialiased;
}
@mixin fs-bodyHeading($level, $size-only: false) {
    $heading: nth($fs-bodyHeadings, $level);

    @include font-size(nth($heading, 1), nth($heading, 2));

    @if $size-only == false {
        @include f-bodyHeading;
    }
}

@mixin f-bodyCopy {
    font-family: $serif;
    -webkit-font-smoothing: antialiased;
}
@mixin fs-bodyCopy($level, $size-only: false) {
    $bodycopy: nth($fs-bodyCopy, $level);

    @include font-size(nth($bodycopy, 1), nth($bodycopy, 2));

    @if $size-only == false {
        @include f-bodyCopy;
    }
}

@mixin f-data {
    font-family: $sans-serif;
    -webkit-font-smoothing: antialiased;
}
@mixin fs-data($level, $size-only: false) {
    $data: nth($fs-data, $level);

    @include font-size(nth($data, 1), nth($data, 2));

    @if $size-only == false {
        @include f-data;
    }
}

// CSS3 helpers
// =============================================================================

@mixin sticky {
    position: -webkit-sticky;
    position: -moz-sticky;
    position: -ms-sticky;
    position: sticky;
}

@mixin box-sizing($box) {
    -webkit-box-sizing: $box;
    -moz-box-sizing: $box;
    box-sizing: $box;
}

@mixin transition($args...) {
    -webkit-transition: $args;
    -moz-transition: $args;
    transition: $args;
}

@mixin transform($args) {
    -webkit-transform: $args;
    -moz-transform: $args;
    -o-transform: $args;
    -ms-transform: $args;
    transform: $args;
}

@mixin transform-origin($args) {
    -webkit-transform-origin: $args;
    -moz-transform-origin: $args;
    -ms-transform-origin: $args;
    transform-origin: $args;
}

@mixin animation($args) {
    -webkit-animation: $args;
    -moz-animation: $args;
    animation: $args;
}

@mixin keyframes($name) {
    @-webkit-keyframes $name { @content; }
    @-moz-keyframes $name { @content; }
    @keyframes $name { @content; }
}

@mixin rounded-corners($radius: 5px) {
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    border-radius: $radius;
}

@mixin box-shadow($args...) {
    -webkit-box-shadow: $args;
    -moz-box-shadow: $args;
    box-shadow: $args;
}

@mixin background-size($args... ) {
    -webkit-background-size: $args;
    -moz-background-size: $args;
    background-size: $args;
}

@mixin rotate($val) {
    -moz-transform: rotate($val);  /* FF3.5+ */
    -o-transform: rotate($val);  /* Opera 10.5 */
    -webkit-transform: rotate($val);  /* Saf3.1+, Chrome */
    -ms-transform: rotate($val);  /* IE9 */
    transform: rotate($val);
}

@mixin user-select {
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

@mixin simple-gradient($from, $to) {
    // Fix for FF not understanding transparent
    @if $from == transparent {
        $from: transparentize($to, 1);
    }

    @if $to == transparent {
        $to: transparentize($from, 1);
    }
    background-color: $from;
    background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from($from), to($to));
    background-image: -webkit-linear-gradient($from, $to);
    background-image: linear-gradient(to bottom, $from, $to);
}

// Misc
// =============================================================================

@mixin fix-aspect-ratio($width, $height, $startingWidth: 100%) {
    // To get this working, position the child element
    // to 'absolute' in the top left corner
    $height: ($height / $width) * $startingWidth;
    width: $startingWidth;
    padding-bottom: $height;
    position: relative;
    overflow: hidden;
}

@mixin old-ie {
    @if $old-ie { // Only use this content if we're dealing with old IE
        @content;
    }
}

@mixin faux-bullet-point {
    position: relative;
    @include rem((text-indent: 20px));

    &:before {
        position: absolute;
        content: "\2022";
        @include rem((
            left: -22px,
            top: 2px,
            font-size: 48px
        ));
        color: $c-neutral3;
    }
}
