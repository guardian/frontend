@import "_mq";

//Output based on body font-size being 10px
@mixin font-size($size, $line-height: $size) {
    font-size: $size*1px;
    font-size: ($size / 10)*1rem;
    line-height: $line-height*1px;
    line-height: ($line-height / 10)*1rem;
}

@mixin font($family, $weight, $size, $line-height: $size) {
    font-family: $family;
    font-weight: $weight;
    @include font-size($size, $line-height);
}

@mixin fs-header($level, $size-only: false) {
    $header: nth($fs-headers, $level);

    font-size: nth($header, 1)*1px;
    font-size: nth($header, 1)/10*1rem;

    @if $size-only == false {
        font-family: $serifheadline;
        font-weight: 900;
        line-height: 1;
        text-rendering: optimizeLegibility;
        -webkit-font-smoothing: antialiased;
    }
}

@mixin fs-headline($level, $size-only: false) {
    $headline: nth($fs-headlines, $level);

    @include font-size(nth($headline, 1), nth($headline, 2));

    @if $size-only == false {
        font-family: $serifheadline;
        font-weight: normal;
        text-rendering: optimizeLegibility;
        -webkit-font-smoothing: antialiased;
    }
}

@mixin fs-bodyHeading($level, $size-only: false) {
    $heading: nth($fs-bodyHeadings, $level);

    @include font-size(nth($heading, 1), nth($heading, 2));

    @if $size-only == false {
        font-family: $serif;
        font-weight: bold;
        text-rendering: optimizeLegibility;
        -webkit-font-smoothing: subpixel-antialiased;
    }
}

@mixin fs-bodyCopy($level, $size-only: false) {
    $bodycopy: nth($fs-bodyCopy, $level);

    @include font-size(nth($bodycopy, 1), nth($bodycopy, 2));

    @if $size-only == false {
        font-family: $serif;
        -webkit-font-smoothing: subpixel-antialiased;
        text-rendering: optimizeSpeed;
    }
}

@mixin fs-data($level, $size-only: false) {
    $data: nth($fs-data, $level);

    @include font-size(nth($data, 1), nth($data, 2));

    @if $size-only == false {
        font-family: $sans-serif;
        -webkit-font-smoothing: subpixel-antialiased;
        text-rendering: optimizeSpeed;
    }
}

@mixin box-sizing($box) {
    -webkit-box-sizing: $box;
    -moz-box-sizing: $box;
    box-sizing: $box;
}

@mixin transition($args...) {
    -webkit-transition: $args;
    -moz-transition: $args;
    transition: $args;
}

@mixin transform($args) {
    -webkit-transform: $args;
    -moz-transform: $args;
    -ms-transform: $args;
    transform: $args;
}

@mixin transform-origin($args) {
    -webkit-transform-origin: $args;
    -moz-transform-origin: $args;
    -ms-transform-origin: $args;
    transform-origin: $args;
}

@mixin animation($args) {
    -webkit-animation: $args;
    -moz-animation: $args;
    -ms-animation: $args;
    animation: $args;
}

@mixin keyframes($name) {
    @-webkit-keyframes $name { @content; }
    @-moz-keyframes $name { @content; }
    @-ms-keyframes $name { @content; }
    @keyframes $name { @content; }
}

@mixin rounded-corners($radius: 5px) {
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    border-radius: $radius;
}

@mixin box-shadow($args) {
    -webkit-box-shadow: $args;
    -moz-box-shadow: $args;
    box-shadow: $args;
}

@mixin rotate($val) {
    -moz-transform: rotate($val);  /* FF3.5+ */
    -o-transform: rotate($val);  /* Opera 10.5 */
    -webkit-transform: rotate($val);  /* Saf3.1+, Chrome */
    -ms-transform: rotate($val);  /* IE9 */
    transform: rotate($val);
}

@mixin user-select {
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

@mixin fix-aspect-ratio($width, $height, $startingWidth: 100%) {
    // To get this working, position the child element
    // to 'absolute' in the top left corner
    $height: ($height / $width) * $startingWidth;
    width: $startingWidth;
    padding-bottom: $height;
    position: relative;
    overflow: hidden;
}

@mixin old-ie {
    // Only use this content if we're dealing with old IE
    @if $old-ie {
        @content;
    }
}
