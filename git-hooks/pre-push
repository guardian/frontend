#!/usr/bin/env node
/* eslint-disable no-console */

const execa = require('execa');

const getCurrentBranchName = () =>
    execa.stdout('git', ['symbolic-ref', '--short', 'HEAD']);

const getRemoteBranches = () => execa.stdout('git', ['branch', '-r']);

const diffAgainstRemote = branch =>
    execa
        .stdout('git', ['diff', '--cached', '--name-only', `origin/${branch}`])
        .then(diffs => diffs.split('\n'));

const diffAgainstMaster = () =>
    execa
        .stdout('git', ['diff', '--name-only', 'origin/master...'])
        .then(diffs => diffs.split('\n'));

const install = () => execa.stdout('make', ['install']);

const validateSass = () =>
    execa.stdout('node', ['./tools/task-runner/runner', 'validate/sass'], {
        stdio: 'inherit',
    });

const validateJs = () =>
    execa.stdout(
        'node',
        ['./tools/task-runner/runner', 'validate/javascript'],
        {
            stdio: 'inherit',
        }
    );

const testJs = () =>
    execa.stdout('node', ['./tools/task-runner/runner', 'test/javascript'], {
        stdio: 'inherit',
    });

const validate = diffs => {
    const css = diffs.filter(filename => filename.endsWith('.scss'));
    const js = diffs.filter(
        filename => filename.endsWith('.js') || filename.endsWith('.jsx')
    );

    if (css.length || js.length) {
        return install().then(() => {
            const promises = [];

            if (css.length) {
                promises.push(validateSass);
            }
            if (js.length) {
                promises.push(validateJs);
                promises.push(testJs);
            }

            return promises.reduce(
                (prev, curr) => prev.then(curr),
                Promise.resolve()
            );
        });
    }

    return Promise.resolve();
};

getCurrentBranchName().then(branch =>
    getRemoteBranches().then(branches => {
        if (branches.includes(branch)) {
            // remote branch exists, validate files that have changed locally
            // compared to remote feature branch
            return diffAgainstRemote(branch).then(validate).catch(e => {
                console.log(`\n${e}\n`);
                process.exit(1);
            });
        }

        // remote branch doesn't exist, validate files that have changed
        // compared to local master branch
        return diffAgainstMaster().then(validate).catch(e => {
            console.log(`\n${e}\n`);
            process.exit(1);
        });
    })
);
