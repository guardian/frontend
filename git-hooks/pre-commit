#!/usr/bin/env node
/* eslint-disable no-console */

const path = require('path');
const fs = require('fs');
const execa = require('execa');
const chalk = require('chalk');

execa
    .stdout('git', ['diff', '--name-only', '--cached'])
    .then(staged => staged.split('\n'))
    // lint and commit any lint fixes
    .then(staged => {
        const jsFiles = staged
            .filter(file => file.endsWith('.js'))
            .filter(file => fs.existsSync(file));
        if (jsFiles.length) {
            return execa('eslint', ['--fix', ...jsFiles], {
                stdio: 'inherit',
            })
                .then(() =>
                    execa('git', ['add', ...jsFiles], {
                        stdio: 'inherit',
                    })
                )
                .then(() => staged);
        }
        return staged;
    })
    // make sure yarn.lock is commited
    .then(staged => {
        if (
            staged.some(file => file === 'package.json') &&
            !staged.some(file => file === 'yarn.lock')
        ) {
            return Promise.reject(
                `${chalk.red(`${chalk.underline('package.json')} has changed but ${chalk.underline('yarn.lock')} is not included in this commit.`)}\n${chalk.dim(`If this is intentional, commit this change with --no-verify.`)}`
            );
        }
        return staged;
    })
    // make sure docs TOC stays up to date
    .then(staged => {
        if (staged.some(file => file.includes('docs/'))) {
            const docs = path.resolve('docs');
            const readme = path.resolve(docs, 'README.md');
            return execa(path.resolve(docs, 'generate-toc.sh'), ['>', readme], {
                stdio: 'inherit',
            })
                .then(() => execa.sync('git', [readme]))
                .then(() => staged);
        }
        return staged;
    })
    .catch(e => {
        console.log(`\n${e}\n`);
        process.exit(1);
    });
