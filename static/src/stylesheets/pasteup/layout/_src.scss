// ROWS
@mixin layout-row($class, $detect: false) {
    @if ($detect) {
        .has-flex {
            @include flex-row($class);
        }
        .has-no-flex {
            @include no-flex-row($class);
        }
    } @else {
        @if ($browser-supports-flexbox) {
            @include flex-row($class);
        } @else {
            @include no-flex-row($class);
        }
    }
}

@mixin flex-row($class) {
    @include mq(tablet) {
        .#{$class} {
            display: flex;
            flex-direction: row;
            flex-wrap: nowrap;
            align-content: stretch;
            align-items: stretch;
            width: 100%; // Prevent consecutive rows from flexing together in FF
        }
        .#{$class}--reverse {
            flex-direction: row-reverse;
        }
        .#{$class}__item {
            flex: 1;
            flex-grow: 1;
            flex-basis: 0;
            width: 0; // Prevent items to grow out of their parent in FF
        }
        .#{$class}__item--boost-1 {
            flex-grow: 1.5;
        }
        .#{$class}__item--boost-2 {
            flex-grow: 2;
        }
    }

    @include mq($until: tablet) {
        .#{$class}--layout-m {
            display: flex;
            flex-wrap: wrap;

            // Items fill half the width of their container
            .#{$class}__item {
                flex-basis: 50%;
            }

            // Break the flow on mobile:
            // Item will fill the whole width of its container
            .#{$class}__item--break-m {
                flex: 1 100%;
            }
        }
    }
}

@mixin no-flex-row($class, $fallback-width: 940px) {
    .#{$class} {
        @include clearfix;
        width: $fallback-width;
    }

    .#{$class}__item {
        float: left;
    }

    @each $i in 2, 3, 4 {
        .#{$class}--items-#{$i} .#{$class}__item {
            width: $fallback-width / $i;
        }
    }
}

// COLUMNS

@function width-of-fallback-column-item($container-width, $gap-between-columns, $number-of-columns) {
    @return ($container-width - $gap-between-columns * ($number-of-columns - 1)) / $number-of-columns;
}

@mixin layout-columns(
    $class,
    $column-min-width: 300px,
    $column-gap: $gs-gutter,
    $columns-fallback-width: 940px,
    $columns-fallback-columns: 3
) {
    @if $browser-supports-columns {
        .#{$class} {
            column-width: $column-min-width;
            column-gap: $column-gap;
            column-fill: balance;
        }
        .#{$class}__item {
            // Fix a bug in IE where hovering items would change
            // the column container's height
            height: 100%;
            display: inline-block;
            width: 100%;
        }
    }
    @if not $browser-supports-columns {
        .#{$class} {
            @include clearfix;
            margin-left: $column-gap / 2 * -1;
            margin-right: $column-gap / 2 * -1;
        }
        .#{$class}__item {
            position: relative;
            display: block;
            margin-left: $column-gap / 2;
            margin-right: $column-gap / 2;
            width: width-of-fallback-column-item(
                $container-width: $columns-fallback-width,
                $gap-between-columns: $column-gap,
                $number-of-columns: $columns-fallback-columns
            );

            @include mq(tablet) {
                float: left;
            }

            &:nth-child(n) {
                clear: none;
            }

            &:nth-child(#{$columns-fallback-columns + 'n+1'}) {
                clear: both;
            }
        }
    }
}
