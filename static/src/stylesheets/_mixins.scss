@import 'components/sass-mq/_mq';

// Guss - https://github.com/guardian/guss
// =============================================================================

@import 'components/guss-typography/_typography';
@import 'components/guss-css3/_css3';
@import 'components/guss-layout/_columns';
@import 'components/guss-layout/_row';

// The grid system is already imported in the _vars.scss file where it's needed
// @import 'components/guss-grid-system/_grid-system';

// CSS helpers
// =============================================================================

// Transparent background with fallback for older browsers
@mixin transparent-background($color, $opacity) {
    background-color: $color;
    background-color: rgba($color, $opacity);
}

// Vertical linear gradient with a plain fallback for older browsers
@mixin simple-gradient($from, $to) {
    // Fix for browsers not understanding transparent
    @if $from == transparent {
        $from: transparentize($to, 1);
    }

    @if $to == transparent {
        $to: transparentize($from, 1);
    }
    background-color: $from;
    background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from($from), to($to));
    background-image: -webkit-linear-gradient($from, $to);
    background-image: linear-gradient(to bottom, $from, $to);
}

@function aspect-ratio-height($x, $y, $startingWidth: 100%) {
    @return ($y / $x) * $startingWidth;
}

@mixin fix-aspect-ratio($x, $y, $startingWidth: 100%) {
    // To get this working, position the child element
    // to 'absolute' in the top left corner
    width: $startingWidth;
    padding-bottom: aspect-ratio-height($x, $y, $startingWidth);
    position: relative;
    overflow: hidden;
}

@mixin faux-bullet-point($color: colour(neutral-3), $right-space: 2px) {
    &:before {
        display: inline-block;
        content: '';
        @include border-radius(6px);
        height: 12px;
        width: 12px;
        margin-right: $right-space;
        background-color: $color;
    }
}

@mixin stars($width: 14px, $margin-top: 0, $margin-bottom: 0, $margin-right: 0) {
    .stars {
        display: block;
        white-space: nowrap;
        overflow: hidden;
        margin-top: $margin-top;
        margin-bottom: $margin-bottom;
        width: ($width * 5) + ($margin-right * 5);
        line-height: 1;

        .star__item {
            margin-right: $margin-right;
            width: $width;
            height: $width;
        }
    }
}

// Hide content visually, still readable by screen readers
@mixin u-h {
    border: 0 !important;
    clip: rect(0 0 0 0) !important;
    height: 1px !important;
    margin: -1px !important;
    overflow: hidden !important;
    padding: 0 !important;
    position: absolute !important;
    width: 1px !important;
}

// Clamps a block of text to a certain number of lines,
// followed by an ellipsis in Webkit and Blink based browsers
// Reference: http://dropshado.ws/post/1015351370/webkit-line-clamp
@mixin text-clamp($lines: 2, $line-height: false) {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $lines;

    // Fallback for non-Webkit browsers
    // (won't show `â€¦` at the end of the block)
    @if $line-height {
        max-height: $line-height * $lines;
    }
}

@mixin icon($name, $with-width: true) {
    @if ($svg-support) {
        .svg & {
            @extend %svg-i-#{$name};
            @if ($with-width) {
                @extend %i-#{$name};
            }
            display: inline-block;
            background-repeat: no-repeat;
            @include background-size(contain);
        }
    }
}

// icon button (circular element containing a centered icon)
@mixin icon-button($name, $buttonSize) {
    cursor: pointer;
    width: $buttonSize;
    height: $buttonSize;
    @include border-radius($buttonSize);
    position: relative;
    display: block;

    i,
    .i {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        margin: auto;
        @include icon($name);
    }
}

// Micro clearfix (http://nicolasgallagher.com/micro-clearfix-hack/)
@mixin clearfix {
    &:after,
    &:before {
        content: '';
        display: table;
    }
    &:after {
        clear: both;
    }
    @if $old-ie {
        zoom: 1;
    }
}

@mixin video-play-button-size($size) {
    width: $size;
    height: $size;
    font-size: $size/6 // play triangle is em based so this scales it;
}

@mixin transition-duration($duration: 1s) {
    -webkit-transition-duration: $duration;
    transition-duration: $duration;
}

@mixin display-flex {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
}

@mixin flex-wrap($wrap) {
    -webkit-flex-wrap: $wrap;
    -ms-flex-wrap: $wrap;
    flex-wrap: $wrap;
}

@mixin flex-direction($direction) {
    -webkit-flex-direction: $direction;
    -ms-flex-direction: $direction;
    flex-direction: $direction;
}

@mixin align-items--start {
    -webkit-box-align: start;
    -webkit-align-items: flex-start;
    -ms-flex-align: start;
    align-items: flex-start;
}

@mixin align-items--end {
    -webkit-box-align: end;
    -webkit-align-items: flex-end;
    -ms-flex-align: end;
    align-items: flex-end;
}

@mixin align-items--stretch {
    -webkit-box-align: stretch;
    -webkit-align-items: stretch;
    -ms-flex-align: stretch;
    align-items: stretch;
}

// note that if using this in a media query, the fallback needs to
// be windowed between breakpoints, because the nth-child is not reset
@mixin columns($cols: 1, $gap: 0, $rule: false) {
    @if $browser-supports-columns {
        -webkit-column-count: $cols;
        -moz-column-count: $cols;
        column-count: $cols;

        -webkit-column-gap: $gap;
        -moz-column-gap: $gap;
        column-gap: $gap;

        @if $rule {
            @include column-rule;
        }

    } @else {
        margin-left: 0 - $gap * .5;
        margin-right: 0 - $gap * .5;
        & > * {
            @include box-sizing(border-box);
            width: (100% / $cols);
            float: left;
            padding-left: $gap * .5;
            padding-right: $gap * .5;

            &:nth-child(#{$cols}n+1) {
                clear: left;
            }
        }
    }
}

@mixin column-rule($style: 1px solid colour(neutral-5)) {
    -webkit-column-rule: $style;
    -moz-column-rule: $style;
    column-rule: $style;
}

@function colour($color) {
    @if map-has-key($frontend-palette, $color) {
        @return map-get($frontend-palette, $color);
    } @else {
        @if map-has-key($pasteup-palette, $color) {
            @return guss-colour($color, $pasteup-palette);
        } @else {
            @warn "#{$color} not found in either frontend or pasteup palette";
            @return false;
        }
    }
}

@function colour-hover($colour) {
    @return darken(colour($colour), 10%)
}

@mixin absolute-center {
    // this is a pattern for horizontally and vertically centering an element within its container
    // the negative values expand the box in which the element is centered, which is required when the element
    // is bigger than its container (can be increased if required)
    position: absolute;
    top: -20px;
    bottom: -20px;
    left: -20px;
    right: -20px;
    margin: auto;
}

%absolute-center {
    @include absolute-center;
}

@mixin input-placeholder {
    &::-webkit-input-placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
}

// convert a given width to one available in _vars.scss if it's within the tolerance
@function normalize-width($width) {
    $tolerance: 10px;

    @each $candidate in $available-image-widths {
        @if (abs($candidate - $width) <= $tolerance) {
            @return $candidate;
        }
    }

    @return $width;
}
