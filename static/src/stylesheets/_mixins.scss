@import 'sass-mq/_mq';
@import 'pasteup/src';

// CSS helpers
// =============================================================================

@mixin circular {
    border-radius: 1000px; // Android 2.3 cannot deal with '50%'
}

// Vertical linear gradient with a plain fallback for older browsers
@mixin simple-gradient($from, $to) {
    // Fix for browsers not understanding transparent
    @if $from == transparent {
        $from: transparentize($to, 1);
    }

    @if $to == transparent {
        $to: transparentize($from, 1);
    }
    background-color: $from;
    background-image: linear-gradient(to bottom, $from, $to);
}

@function aspect-ratio-height($x, $y, $startingWidth: 100%) {
    @return ($y / $x) * $startingWidth;
}

@mixin fix-aspect-ratio($x, $y, $startingWidth: 100%) {
    // To get this working, position the child element
    // to 'absolute' in the top left corner
    width: $startingWidth;
    padding-bottom: aspect-ratio-height($x, $y, $startingWidth);
    position: relative;
    overflow: hidden;
}

@mixin faux-bullet-point($color: $neutral-3, $right-space: 2px) {
    &:before {
        display: inline-block;
        content: '';
        border-radius: 6px;
        height: 12px;
        width: 12px;
        margin-right: $right-space;
        background-color: $color;
    }
}

@mixin stars($width: 14px, $margin-top: 0, $margin-bottom: 0, $margin-right: 0) {
    .stars {
        display: block;
        white-space: nowrap;
        overflow: hidden;
        margin-top: $margin-top;
        margin-bottom: $margin-bottom;
        line-height: 1;
    }
    .star__item {
        margin-right: $margin-right;
        width: $width;
        height: $width;
    }
    .star__item--golden {
        fill: #ffce4b;
    }
    .star__item--grey {
        fill: #000000;
        opacity: .15;
    }
}

// Hide content visually, still readable by screen readers
@mixin u-h {
    border: 0 !important;
    clip: rect(0 0 0 0) !important;
    height: 1px !important;
    margin: -1px !important;
    overflow: hidden !important;
    padding: 0 !important;
    position: absolute !important;
    width: 1px !important;
}

// Clamps a block of text to a certain number of lines,
// followed by an ellipsis in Webkit and Blink based browsers
// Reference: http://dropshado.ws/post/1015351370/webkit-line-clamp
@mixin text-clamp($lines: 2, $line-height: false) {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $lines;

    // Fallback for non-Webkit browsers
    // (won't show `â€¦` at the end of the block)
    @if $line-height {
        max-height: $line-height * $lines;
    }
}

@mixin ellipsis() {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

@mixin icon($name, $with-width: true) {
    @if ($svg-support) {
        .svg & {
            @extend %svg-i-#{$name} !optional;
            @if ($with-width) {
                @extend %i-#{$name} !optional;
            }
            display: inline-block;
            background-repeat: no-repeat;
            background-size: contain;
        }
    }
}

// icon button (circular element containing a centered icon)
@mixin icon-button($name, $buttonSize) {
    cursor: pointer;
    width: $buttonSize;
    height: $buttonSize;
    border-radius: $buttonSize;
    position: relative;
    display: block;

    i,
    .i {
        @include icon($name);
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        margin: auto;
    }
}

// Micro clearfix (http://nicolasgallagher.com/micro-clearfix-hack/)
@mixin clearfix {
    &:after,
    &:before {
        content: '';
        display: table;
    }
    &:after {
        clear: both;
    }
    @if $old-ie {
        zoom: 1;
    }
}

@mixin mobile-only {
    @include mq(tablet) {
        display: none !important;
    }
}

@mixin video-play-button-size($size) {
    width: $size;
    height: $size;

    // Specify font-size to influence the em-based triangle for the play button.
    @if ($size <= $vjs-small-button-size) {
        font-size: 9px;
    } @else {
        font-size: 12px;
    }
}

// note that if using this in a media query, the fallback needs to
// be windowed between breakpoints, because the nth-child is not reset
@mixin columns($cols: 1, $gap: 0, $rule: false) {
    @if $browser-supports-columns {
        column-count: $cols;
        column-gap: $gap;

        @if $rule {
            @include column-rule;
        }

    } @else {
        margin-left: 0 - $gap * .5;
        margin-right: 0 - $gap * .5;
        & > * {
            box-sizing: border-box;
            width: (100% / $cols);
            float: left;
            padding-left: $gap * .5;
            padding-right: $gap * .5;

            &:nth-child(#{$cols + 'n+1'}) {
                clear: left;
            }
        }
    }
}

@mixin column-rule($style: 1px solid $neutral-5) {
    column-rule: $style;
}

@function colour-hover($colour) {
    @return darken($colour, 10%)
}

@mixin absolute-center {
    // this is a pattern for horizontally and vertically centering an element within its container
    // the negative values expand the box in which the element is centered, which is required when the element
    // is bigger than its container (can be increased if required)
    position: absolute;
    top: -20px;
    bottom: -20px;
    left: -20px;
    right: -20px;
    margin: auto;
}

%absolute-center {
    @include absolute-center;
}

// convert a given width to one available in _vars.scss if it's within the tolerance
@function normalize-width($width) {
    $tolerance: 10px;

    @each $candidate in $available-image-widths {
        @if (abs($candidate - $width) <= $tolerance) {
            @return $candidate;
        }
    }

    @return $width;
}

@mixin content-gutter {
    padding-left: $gs-gutter/2;
    padding-right: $gs-gutter/2;

    @include mq(mobileLandscape) {
        padding-left: $gs-gutter;
        padding-right: $gs-gutter;
    }
}

// Trailing slash mixins
// Please note the container of the trailing-slash-items must contain font-size: 0;
// to ensure there's no missalignment between inline-block items
@mixin trailing-slash-item {
    display: inline-block;

    &:last-of-type > a:after {
        content: '';
    }
}

@mixin trailing-slash-link {
    position: relative;
    display: block;
    padding-left: .3em;
    padding-right: .35em;
}

@mixin trailing-slash {
    content: '/';
    font-size: 1em;
    position: absolute;
    pointer-events: none;

    //optically aligns slashes
    top: 0;
    right: -.19em;
}
