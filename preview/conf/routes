# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

GET     /_healthcheck               controllers.HealthCheck.healthCheck()
GET     /responsive-viewer/*path    controllers.ResponsiveViewerController.preview(path)

# For dev machines
GET        /assets/internal/*file                                                              controllers.Assets.at(path="/public", file)
GET        /assets/*path                                                                       dev.DevAssetsController.at(path)
GET        /geolocation                                                                        controllers.FakeGeolocationController.geolocation

#Login
# authentication endpoints
GET           /login                                                                           controllers.OAuthLoginPreviewController.login
POST          /login                                                                           controllers.OAuthLoginPreviewController.loginAction
GET           /oauth2callback                                                                  controllers.OAuthLoginPreviewController.oauth2Callback
GET           /logout                                                                          controllers.OAuthLoginPreviewController.logout

# Crossword
GET        /crosswords/$crosswordType<cryptic|quick|quiptic|prize|everyman|azed|special|genius|speedy|weekend>/:id    controllers.CrosswordPageController.crossword(crosswordType: String, id: Int)


# Commercial
GET        /advertiser-content/:campaignName/:pageName                                         commercial.controllers.HostedContentController.renderHostedPage(campaignName, pageName)
GET        /advertiser-content/:campaignName/:pageName/:cType/onward.json                      commercial.controllers.HostedContentController.renderOnwardComponent(campaignName, pageName, cType)
GET        /advertiser-content/:campaignName/:pageName/autoplay.json                           commercial.controllers.HostedContentController.renderAutoplayComponent(campaignName, pageName)

# Reader revenue
GET        /reader-revenue/contributions-banner-deploy-log/$region<united-kingdom|united-states|australia|rest-of-world>               controllers.ReaderRevenueAppController.contributionsBannerDeployLog(region: String)

# Onward
GET        /most-read.json                                                                     controllers.MostPopularController.render(path = "")
GET        /most-read/*path.json                                                               controllers.MostPopularController.render(path)
GET        /most-read-geo.json                                                                 controllers.MostPopularController.renderPopularGeo()
GET        /most-read-day.json                                                                 controllers.MostPopularController.renderPopularDay(countryCode)

GET        /top-stories.json                                                                   controllers.TopStoriesController.renderTopStories()
GET        /top-stories/trails.json                                                            controllers.TopStoriesController.renderTrails()
GET        /related/*path.json                                                                 controllers.RelatedController.render(path)
GET        /related/*path                                                                      controllers.RelatedController.renderHtml(path)
GET        /popular-in-tag/*tag.json                                                           controllers.PopularInTag.render(tag)

GET        /preference/edition/:edition                                                        controllers.ChangeEditionController.render(edition)

GET        /cards/opengraph/*path.json                                                         controllers.CardController.opengraph(path)
GET        /tagged.json                                                                        controllers.TaggedContentController.renderJson(tag: String)

GET        /:mediaType/section/:sectionId/*seriesId.json                                       controllers.MediaInSectionController.renderSectionMediaWithSeries(mediaType, sectionId, seriesId)
GET        /:mediaType/section/:sectionId.json                                                 controllers.MediaInSectionController.renderSectionMedia(mediaType, sectionId)
GET        /video/most-viewed.json                                                             controllers.MostViewedVideoController.renderMostViewed()
GET        /video/in-series/*series.json                                                       controllers.MostViewedVideoController.renderInSeries(series: String)
GET        /audio/most-viewed.json                                                             controllers.MostViewedAudioController.renderMostViewed()
GET        /embed/card/*path.json                                                              controllers.RichLinkController.render(path)
GET        /embed/card/*path                                                                   controllers.RichLinkController.renderHtml(path)

# Sport
GET        /sport/cricket/match/:matchDate/:teamId.json                                        cricket.controllers.CricketMatchController.renderMatchIdJson(matchDate, teamId)
GET        /sport/cricket/match/:matchDate/:teamId                                             cricket.controllers.CricketMatchController.renderMatchId(matchDate, teamId)

GET        /football/fixtures/:year/:month/:day.json                                           football.controllers.FixturesController.allFixturesForJson(year, month, day)
GET        /football/fixtures/:year/:month/:day                                                football.controllers.FixturesController.allFixturesFor(year, month, day)
GET        /football/fixtures/more/:year/:month/:day.json                                      football.controllers.FixturesController.moreFixturesForJson(year, month, day)
GET        /football/fixtures/more/:year/:month/:day                                           football.controllers.FixturesController.moreFixturesFor(year, month, day)
GET        /football/fixtures                                                                  football.controllers.FixturesController.allFixtures()
GET        /football/fixtures.json                                                             football.controllers.FixturesController.allFixturesJson()
GET        /football/:tag/fixtures/:year/:month/:day.json                                      football.controllers.FixturesController.tagFixturesForJson(year, month, day, tag)
GET        /football/:tag/fixtures/:year/:month/:day                                           football.controllers.FixturesController.tagFixturesFor(year, month, day, tag)
GET        /football/:tag/fixtures                                                             football.controllers.FixturesController.tagFixturesJson(tag)
GET        /football/:tag/fixtures.json                                                        football.controllers.FixturesController.tagFixtures(tag)

GET        /football/results/:year/:month/:day.json                                            football.controllers.ResultsController.allResultsForJson(year, month, day)
GET        /football/results/:year/:month/:day                                                 football.controllers.ResultsController.allResultsFor(year, month, day)
GET        /football/results/more/:year/:month/:day.json                                       football.controllers.ResultsController.moreResultsForJson(year, month, day)
GET        /football/results/more/:year/:month/:day                                            football.controllers.ResultsController.moreResultsFor(year, month, day)
GET        /football/results                                                                   football.controllers.ResultsController.allResults()
GET        /football/results.json                                                              football.controllers.ResultsController.allResultsJson()
GET        /football/:tag/results/:year/:month/:day.json                                       football.controllers.ResultsController.tagResultsForJson(year, month, day, tag)
GET        /football/:tag/results/:year/:month/:day                                            football.controllers.ResultsController.tagResultsFor(year, month, day, tag)
GET        /football/:tag/results                                                              football.controllers.ResultsController.tagResults(tag)
GET        /football/:tag/results.json                                                         football.controllers.ResultsController.tagResultsJson(tag)

GET        /football/live                                                                      football.controllers.MatchDayController.liveMatches()
GET        /football/live.json                                                                 football.controllers.MatchDayController.liveMatchesJson()
GET        /football/:competition/live                                                         football.controllers.MatchDayController.competitionMatches(competition)
GET        /football/:competition/live.json                                                    football.controllers.MatchDayController.competitionMatchesJson(competition)

GET        /football/match-day/:year/:month/:day.json                                          football.controllers.MatchDayController.matchesForJson(year, month, day)
GET        /football/match-day/:year/:month/:day                                               football.controllers.MatchDayController.matchesFor(year, month, day)
GET        /football/match-day/:competition/:year/:month/:day.json                             football.controllers.MatchDayController.competitionMatchesForJson(competition, year, month, day)
GET        /football/match-day/:competition/:year/:month/:day                                  football.controllers.MatchDayController.competitionMatchesFor(competition, year, month, day)

GET        /football/tables                                                                    football.controllers.LeagueTableController.renderLeagueTables()
GET        /football/tables.json                                                               football.controllers.LeagueTableController.renderLeagueTablesJson()
GET        /football/:competition/table                                                        football.controllers.LeagueTableController.renderCompetition(competition)
GET        /football/:competition/table.json                                                   football.controllers.LeagueTableController.renderCompetitionJson(competition)
GET        /football/:competition/:group/table                                                 football.controllers.LeagueTableController.renderCompetitionGroup(competition, group)
GET        /football/:competition/:group/table.json                                            football.controllers.LeagueTableController.renderCompetitionGroupJson(competition, group)

GET        /football/:competitionTag/overview/embed                                            football.controllers.WallchartController.renderWallchartEmbed(competitionTag)
GET        /football/:competitionTag/overview                                                  football.controllers.WallchartController.renderWallchart(competitionTag)

GET        /football/api/match-nav/:year/:month/:day/:home/:away.json                          football.controllers.MoreOnMatchController.matchNavJson(year, month, day, home, away)
GET        /football/api/match-nav/:year/:month/:day/:home/:away                               football.controllers.MoreOnMatchController.matchNav(year, month, day, home, away)
GET        /football/api/match-nav/:matchId.json                                               football.controllers.MoreOnMatchController.moreOnJson(matchId)
GET        /football/api/match-nav/:matchId                                                    football.controllers.MoreOnMatchController.moreOn(matchId)
GET        /football/api/big-match-special/:matchId.json                                       football.controllers.MoreOnMatchController.bigMatchSpecial(matchId)

GET        /football/competitions                                                              football.controllers.CompetitionListController.renderCompetitionList()
GET        /football/competitions.json                                                         football.controllers.CompetitionListController.renderCompetitionListJson()
GET        /football/teams                                                                     football.controllers.LeagueTableController.renderTeamlist()
GET        /football/teams.json                                                                football.controllers.LeagueTableController.renderTeamlistJson()

GET        /football/match/:year/:month/:day/$home<[\w\d-\.]+>-v-$away<[\w\d-\.]+>.json        football.controllers.MatchController.renderMatchJson(year,month,day,home,away)
GET        /football/match/:year/:month/:day/$home<[\w\d-\.]+>-v-$away<[\w\d-\.]+>             football.controllers.MatchController.renderMatch(year,month,day,home,away)
GET        /football/match/:matchId.json                                                       football.controllers.MatchController.renderMatchIdJson(matchId)
GET        /football/match/:matchId                                                            football.controllers.MatchController.renderMatchId(matchId)

GET        /football/match-redirect/:year/:month/:day/:homeTeamId/:awayTeamId                  football.controllers.MoreOnMatchController.redirectToMatch(year,month,day,homeTeamId,awayTeamId)
GET        /football/match-redirect/:matchId                                                   football.controllers.MoreOnMatchController.redirectToMatchId(matchId)

GET        /sport/rugby/api/score/:year/:month/:day/:team1Id/:team2Id.json                     rugby.controllers.MatchesController.scoreJson(year, month, day, team1Id, team2Id)
GET        /sport/rugby/api/score/:year/:month/:day/:team1Id/:team2Id                          rugby.controllers.MatchesController.score(year, month, day, team1Id, team2Id)

# Onward journeys
GET        /series/*path.json                                                                  controllers.SeriesController.renderSeriesStories(path)

GET        /$path<[\w\d-]*(/[\w\d-]*)?/(video|audio)/.*>/info.json                             controllers.MediaController.renderInfoJson(path)
GET        /$path<[\w\d-]*(/[\w\d-]*)?/(video|audio)/.*>.json                                  controllers.MediaController.renderJson(path)

# Facia
GET        /                                                                                   controllers.FaciaDraftController.rootEditionRedirect()
GET        /rss                                                                                controllers.FaciaControllerImpl.renderRootFrontRss()
GET        /$path<.+>/show-more/*id.json                                                       controllers.FaciaDraftController.renderShowMore(path, id)
GET        /$path<(culture|sport|commentisfree|business|money|rss)>                            controllers.FaciaDraftController.renderFront(path)
GET        /$path<(\w\w)(/[\w\d-]+)?>/rss                                                      controllers.FaciaDraftController.renderFrontRss(path)
GET        /$path<.+>/lite.json                                                                controllers.FaciaDraftController.renderFrontJsonLite(path)
GET        /$path<[\w\d-]*(/[\w\d-]*)?(/[\w\d-]*)?>.json                                       controllers.FaciaDraftController.renderFrontJson(path)


GET        /container/*id.json                                                                 controllers.FaciaDraftController.renderContainerJson(id)

# Newspaper pages
GET        /theguardian                                                                        controllers.NewspaperController.latestGuardianNewspaper()
GET        /theobserver                                                                        controllers.NewspaperController.latestObserverNewspaper()
GET        /$path<theguardian|theobserver>/$year<\d\d\d\d>/$month<\w\w\w>/$day<\d\d>           controllers.NewspaperController.newspaperForDate(path, day, month, year)
GET        /$path<theguardian|theobserver>/$year<\d\d\d\d>/$month<\w\w\w>/$day<\d\d>/all       controllers.NewspaperController.allOn(path, day, month, year)

# Atoms
POST       /atom/quiz/:id/*path                                                                controllers.QuizController.submit(id, path)
GET        /atom/youtube/:id.json                                                              controllers.YoutubeController.getAtomId(id: String)

GET        /$path<.+/\d\d\d\d/\w\w\w/\d\d>                                                     controllers.AllIndexController.on(path)
GET        /$path<.+>/latest                                                                   controllers.LatestIndexController.latest(path)
GET        /$path<.+>/latest/email                                                             controllers.LatestIndexController.latest(path)
GET        /$path<.+>/latest/email.emailjson                                                   controllers.LatestIndexController.latest(path)
GET        /$path<.+>/latest/email.emailtxt                                                    controllers.LatestIndexController.latest(path)
GET        /$path<.+>/$year<\d\d\d\d>/$month<\w\w\w>/$day<\d\d>/all                            controllers.AllIndexController.allOn(path, day, month, year)
GET        /$path<.+>/$year<\d\d\d\d>/$month<\w\w\w>/$day<\d\d>/altdate                        controllers.AllIndexController.altDate(path, day, month, year)
GET        /$path<.+>/all                                                                      controllers.AllIndexController.all(path)

GET        /$path<[\w\d-]*(/[\w\d-]*)?(/[\w\d-]*)?>/trails.json                                controllers.IndexController.renderTrailsJson(path)
GET        /$path<[\w\d-]*(/[\w\d-]*)?(/[\w\d-]*)?>/trails                                     controllers.IndexController.renderTrails(path)

# the (applications/)? bit here is for X-Accel-Redirects on the preview server

GET        /$path<[\w\d-]*(/[\w\d-]*)?/gallery/.*>/lightbox.json                               controllers.GalleryController.lightboxJson(path)
GET        /$path<[\w\d-]*(/[\w\d-]*)?/gallery/.*>.json                                        controllers.GalleryController.renderJson(path)

GET        /service-worker.js                                                                  controllers.WebAppController.serviceWorker()
GET        /$path<[\w\d-]*(/[\w\d-]*)+>/$file<interactive(-service)?-worker.js>                controllers.InteractiveController.proxyInteractiveWebWorker(path, file)

GET        /$path<[\w\d-]*(/[\w\d-]*)?/(cartoon|graphic|picture)/.*>.json                      controllers.ImageContentController.renderJson(path)

GET        /$path<[\w\d-]*(/[\w\d-]*)?/(interactive|ng-interactive)/.*>.json                   controllers.InteractiveController.renderInteractiveJson(path)

GET        /sharecount/*path.json                                                              controllers.ShareCountController.fetch(path)

# Email paths
GET        /email/form/$emailType<plain|plaindark|plaintone>/$listId<[0-9]+>         controllers.EmailSignupController.renderForm(emailType: String, listId: Int)
GET        /email/form/$emailType<plain|plaindark|plaintone>/:listName               controllers.EmailSignupController.renderFormFromName(emailType: String, listName: String)
GET        /email/form/footer/:listName                                              controllers.EmailSignupController.renderFooterForm(listName: String)
## Submission results (Only accessed server side)
GET        /email/$result<success|invalid|error>/footer                         controllers.EmailSignupController.subscriptionResultFooter(result: String)
GET        /email/success/:listName                                             controllers.EmailSignupController.subscriptionSuccessResult(listName: String)
GET        /email/$result<invalid|error>                                        controllers.EmailSignupController.subscriptionNonsuccessResult(result: String)
## Submission endpoints
POST       /email/footer                                                        controllers.EmailSignupController.submitFooter()
POST       /email                                                               controllers.EmailSignupController.submit()
OPTIONS    /email                                                               controllers.EmailSignupController.options()

# Weather - OLD
GET        /weather/city/:id.json                                                              weather.controllers.WeatherController.forCity(id)
GET        /weather/city.json                                                                  weather.controllers.LocationsController.whatIsMyCity()
GET        /weather/locations                                                                  weather.controllers.LocationsController.findCity(query: String)

# Weather
GET        /weatherapi/city/:id.json                                                           weather.controllers.WeatherController.forCity(id)
GET        /weatherapi/city.json                                                               weather.controllers.LocationsController.whatIsMyCity()
GET        /weatherapi/locations                                                               weather.controllers.LocationsController.findCity(query: String)

# Breaking News
GET        /news-alert/alerts                                                                  controllers.NewsAlertController.alerts()

# Articles
GET     /$path<[^/]+/([^/]+/)?live/.*>.json controllers.LiveBlogController.renderJson(path, lastUpdate: Option[String], rendered: Option[Boolean], isLivePage: Option[Boolean])
GET     /$path<[^/]+/([^/]+/)?live/.*>/email controllers.LiveBlogController.renderEmail(path)
GET     /$path<[^/]+/([^/]+/)?live/.*>/email.emailjson controllers.LiveBlogController.renderEmail(path)
GET     /$path<[^/]+/([^/]+/)?live/.*>/email.emailtxt  controllers.LiveBlogController.renderEmail(path)
GET     /$path<[^/]+/([^/]+/)?live/.*> controllers.LiveBlogController.renderArticle(path, page: Option[String], format: Option[String])
GET     /*path.json                 controllers.ArticleController.renderJson(path)
GET     /*path/email                controllers.ArticleController.renderEmail(path)
GET     /*path/email.emailjson      controllers.ArticleController.renderEmail(path)
GET     /*path/email.emailtxt       controllers.ArticleController.renderEmail(path)


# Don't forward requests for favicon.ico to the Content API
GET        /favicon.ico                                                                        controllers.FaviconController.favicon

# Any "item" from the Content API
GET        /*path                                                                              controllers.ItemController.render(path)

