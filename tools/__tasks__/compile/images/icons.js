#!/usr/bin/env node

const { src, root } = require('../../config').paths;

const fs = require('fs');
const path = require('path');
const glob = require('glob');
const btoa = require('btoa');
const SVGO = require('svgo');
const mkdirp = require('mkdirp');

const svgo = new SVGO();

const getSVG = iconPath =>
    new Promise((resolve, reject) => {
        // eslint-disable-next-line consistent-return
        fs.readFile(iconPath, { encoding: 'utf-8' }, (err, data) => {
            if (err) return reject(err);
            try {
                svgo.optimize(data, result =>
                    resolve({
                        name: path.parse(iconPath).name,
                        data: result,
                    })
                );
            } catch (e) {
                return reject(e);
            }
        });
    });

const sortSVGs = svgs =>
    svgs.sort((a, b) => {
        const aInfo = a.data.info;
        const bInfo = b.data.info;
        if (aInfo.height !== bInfo.height) {
            return aInfo.height - bInfo.height;
        } else if (aInfo.width !== bInfo.width) {
            return bInfo.width - aInfo.width;
        }
        return a.name.localeCompare(b.name);
    });

const generateSassForSVG = svg => {
    const {
        name,
        data: fileData,
        data: { info: { width = 0, height = 0 } },
    } = svg;
    return `
            %svg-i-${name},
            .svg-i-${name} {
                background-image: url(data:image/svg+xml;base64,${btoa(
                    fileData.data
                )});
                background-position: 0 0;
                width: ${width}px;
                height: ${height}px;
            }
            .svg .i-${name} {
                @extend %svg-i-${name} !optional;
            }
    `.replace(/ {8}/g, '');
};

const saveSass = (sass, dest, fileName) =>
    new Promise((resolve, reject) => {
        fs.writeFile(
            path.join(dest, fileName),
            `
                // THIS FILE WAS AUTOMATICALLY GENERATED BY
                // ${path.relative(root, path.resolve(__filename))}
                // DO NOT EDIT IT!

                @if ($svg-support) {
                    ${sass}
                }
            `
                .trim()
                .replace(/ {16}/g, ''),
            err => {
                if (err) return reject(err);
                return resolve();
            }
        );
    });

module.exports = {
    description: 'Create sprites',
    task: ['commercial', 'global', 'membership', 'video'].map(target => ({
        description: `Spriting ${target}`,
        concurrent: true,
        task: () => {
            const srcPath = path.join(src, 'images', target);
            const destPath = path.join(src, 'stylesheets', 'icons');
            const fileName = `_${target}-icons-svg.scss`;

            const iconPaths = glob.sync(path.join(srcPath, '*.svg'));

            mkdirp.sync(destPath);

            return Promise.all(iconPaths.map(getSVG))
                .then(sortSVGs)
                .then(svgs =>
                    svgs
                        .map(generateSassForSVG)
                        .join('')
                        .trim()
                )
                .then(sass => saveSass(sass, destPath, fileName));
        },
    })),
};
