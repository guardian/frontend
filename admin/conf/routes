# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~


GET         /_healthcheck                                                                           controllers.HealthCheck.healthcheck()

# authentication endpoints
GET         /login                                                                                  controllers.admin.OAuthLoginController.login
POST        /login                                                                                  controllers.admin.OAuthLoginController.loginAction
GET         /oauth2callback                                                                         controllers.admin.OAuthLoginController.oauth2Callback
GET         /logout                                                                                 controllers.admin.OAuthLoginController.logout

# static files
GET         /assets/admin/lib/*file                                                                 controllers.admin.UncachedWebAssets.at(file)
GET         /assets/admin/*file                                                                     controllers.admin.UncachedAssets.at(file)
GET         /assets/*path                                                                           dev.DevAssetsController.at(path)

##################### NOTE ############################
#all endpoints below this line should be authenticated#
#######################################################

#Index page
GET         /                                                                                       controllers.admin.AdminIndexController.index()
GET         /admin                                                                                  controllers.admin.AdminIndexController.admin()

#Facia Press
GET         /press                                                                                  controllers.FrontPressController.press()
POST        /press/all                                                                              controllers.FrontPressController.queueAllFrontsForPress()
POST        /press/high                                                                             controllers.FrontPressController.queueHighFrequencyFrontsForPress()
POST        /press/standard                                                                         controllers.FrontPressController.queueStandardFrequencyFrontsForPress()
POST        /press/low                                                                              controllers.FrontPressController.queueLowFrequencyFrontsForPress()

#R2 Press
GET         /press/r2                                                                               controllers.admin.R2PressController.pressForm()
POST        /press/r2                                                                               controllers.admin.R2PressController.press()
GET         /press/r2/batchupload                                                                   controllers.admin.R2PressController.pressForm()
POST        /press/r2/batchupload                                                                   controllers.admin.R2PressController.batchUpload()

# API endpoint proxying for https
GET         /api/proxy/*path                                                                        controllers.admin.Api.proxy(path, callback)
GET         /api/tag                                                                                controllers.admin.Api.tag(q, callback)
GET         /api/item/*path                                                                         controllers.admin.Api.item(path, callback)
GET         /json/proxy/*absUrl                                                                     controllers.admin.Api.json(absUrl)

GET         /images/clear                                                                           controllers.cache.ImageDecacheController.renderImageDecacheForm()
POST        /images/clear                                                                           controllers.cache.ImageDecacheController.decache()

GET         /page/clear                                                                             controllers.cache.PageDecacheController.renderPageDecacheForm()
POST        /page/clear                                                                             controllers.cache.PageDecacheController.decache()

# Ophan proxying for https
GET         /ophan/pageviews/*path                                                                  controllers.admin.OphanApiController.pageViews(path)
GET         /ophan/pageviews                                                                        controllers.admin.OphanApiController.platformPageViews()
GET         /ophan/ads/render-time                                                                  controllers.admin.OphanApiController.adsRenderTime()

#Development endpoints
GET         /dev/switchboard                                                                        controllers.admin.SwitchboardController.renderSwitchboard()
GET         /dev/switchboard-plista                                                                 controllers.admin.SwitchboardPlistaController.renderSwitchboard()

POST        /dev/switchboard                                                                        controllers.admin.SwitchboardController.save()
POST        /dev/switchboard-plista                                                                 controllers.admin.SwitchboardPlistaController.save()

# Analytics
GET         /analytics/abtests                                                                      controllers.admin.AnalyticsController.abtests()
GET         /analytics/confidence                                                                   controllers.admin.AnalyticsConfidenceController.renderConfidence()
GET         /analytics/content/video                                                                controllers.admin.ContentPerformanceController.renderVideoEncodingsDashboard()
GET         /analytics/quality                                                                      controllers.admin.AnalyticsController.renderQuality()

GET         /analytics/headlines-test                                                               controllers.admin.MetricsController.renderHeadlinesTest()

#Facia
GET         /deduped                                                                                controllers.admin.WhatIsDeduped.index()
GET         /deduped/*path                                                                          controllers.admin.WhatIsDeduped.dedupedFor(path)

# Commercial
GET         /admin/commercial                                                                       controllers.admin.CommercialController.renderCommercialMenu()
GET         /analytics/commercial                                                                   controllers.admin.CommercialController.renderCommercial()
GET         /analytics/commercial/specialadunits                                                    controllers.admin.CommercialController.renderSpecialAdUnits()
GET         /analytics/commercial/sponsorships                                                      controllers.admin.CommercialController.renderPaidForTags()
GET         /analytics/commercial/pageskins                                                         controllers.admin.CommercialController.renderPageskins()
GET         /analytics/commercial/surging                                                           controllers.admin.CommercialController.renderSurgingContent()
GET         /analytics/commercial/im-sponsorships                                                   controllers.admin.CommercialController.renderInlineMerchandisingTargetedTags()
GET         /analytics/commercial/templates                                                         controllers.admin.CommercialController.renderCreativeTemplates()
GET         /analytics/commercial/sponsored-containers                                              controllers.admin.CommercialController.sponsoredContainers()
GET         /commercialtools/adunits/toapprove                                                      controllers.admin.CommercialAdUnitController.renderToApprove()
POST        /commercialtools/adunits/toapprove                                                      controllers.admin.CommercialAdUnitController.approve()
GET         /admin/commercial/fluid250                                                              controllers.admin.CommercialController.renderFluidAds()
GET         /analytics/commercial/adtests                                                           controllers.admin.CommercialController.renderAdTests()
GET         /admin/commercial/dfp/flush/view                                                        controllers.admin.commercial.DfpDataController.renderCacheFlushPage()
GET         /admin/commercial/dfp/flush                                                             controllers.admin.commercial.DfpDataController.flushCache()
GET         /admin/commercial/radiator                                                              controllers.admin.CommercialController.renderCommercialRadiator()
GET         /admin/commercial/slot/:slotName                                                        controllers.admin.commercial.SlotController.viewSlot(slotName)
GET         /admin/commercial/adops/takeovers-empty-mpus                                            controllers.admin.commercial.TakeoverWithEmptyMPUsController.viewList()
GET         /admin/commercial/adops/takeovers-empty-mpus/create                                     controllers.admin.commercial.TakeoverWithEmptyMPUsController.viewForm()
POST        /admin/commercial/adops/takeovers-empty-mpus/create                                     controllers.admin.commercial.TakeoverWithEmptyMPUsController.create()
POST        /admin/commercial/adops/takeovers-empty-mpus/remove                                     controllers.admin.commercial.TakeoverWithEmptyMPUsController.remove(takeoverStr)


# Metrics
GET         /metrics/loadbalancers                                                                  controllers.admin.MetricsController.renderLoadBalancers()
GET         /metrics/fastly                                                                         controllers.admin.FastlyController.renderFastly()
GET         /metrics/errors                                                                         controllers.admin.MetricsController.renderErrors()
GET         /metrics/errors/4xx                                                                     controllers.admin.MetricsController.render4XX()
GET         /metrics/errors/5xx                                                                     controllers.admin.MetricsController.render5XX()
GET         /metrics/memory                                                                         controllers.admin.MetricsController.renderMemory()
GET         /metrics/assets                                                                         controllers.admin.MetricsController.renderAssets()
GET         /metrics/googlebot/404                                                                  controllers.admin.MetricsController.renderGooglebot404s()
GET         /metrics/afg                                                                            controllers.admin.MetricsController.renderAfg()

# Radiator
GET         /radiator                                                                               controllers.admin.RadiatorController.renderRadiator()
GET         /radiator/pingdom                                                                       controllers.admin.RadiatorController.pingdom()
GET         /radiator/commit/*hash                                                                  controllers.admin.RadiatorController.commitDetail(hash)

GET         /deploys-radiator/api/deploys                                                           controllers.admin.DeploysRadiatorController.getDeploys(pageSize: Option[String], projectName: Option[String], stage: Option[String])
GET         /deploys-radiator/api/builds/:number                                                    controllers.admin.DeploysRadiatorController.getBuild(number)
GET         /deploys-radiator                                                                       controllers.admin.DeploysRadiatorController.renderDeploysRadiator()

# Redirects
GET         /redirects                                                                              controllers.admin.RedirectController.redirect()
POST        /redirect-post                                                                          controllers.admin.RedirectController.redirectPost()

# Sport troubleshooter
GET         /troubleshoot/football                                                                  controllers.admin.SportTroubleshooterController.renderFootballTroubleshooter()
GET         /troubleshoot/cricket                                                                   controllers.admin.SportTroubleshooterController.renderCricketTroubleshooter()

GET         /troubleshoot/pages                                                                     controllers.admin.TroubleshooterController.index()
GET         /troubleshoot/test                                                                      controllers.admin.TroubleshooterController.test(id, testPath)

# Football admin
GET         /admin/football                                                                         controllers.admin.SiteController.index
GET         /admin/football/browse                                                                  controllers.admin.PaBrowserController.browse
POST        /admin/football/browserRedirect                                                         controllers.admin.PaBrowserController.browserSubstitution
GET         /admin/football/browser/*query                                                          controllers.admin.PaBrowserController.browser(query)
GET         /admin/football/player                                                                  controllers.admin.PlayerController.playerIndex
POST        /admin/football/player/card                                                             controllers.admin.PlayerController.redirectToCard
GET         /admin/football/player/card/competition/:cardType/:playerId/:teamId/:compId.json        controllers.admin.PlayerController.playerCardCompetitionJson(cardType: String, playerId: String, teamId: String, compId: String)
GET         /admin/football/player/card/competition/:cardType/:playerId/:teamId/:compId             controllers.admin.PlayerController.playerCardCompetition(cardType: String, playerId: String, teamId: String, compId: String)
GET         /admin/football/player/card/date/:cardType/:playerId/:teamId/:startDate.json            controllers.admin.PlayerController.playerCardDateJson(cardType: String, playerId: String, teamId: String, startDate: String)
GET         /admin/football/player/card/date/:cardType/:playerId/:teamId/:startDate                 controllers.admin.PlayerController.playerCardDate(cardType: String, playerId: String, teamId: String, startDate: String)
GET         /admin/football/tables                                                                  controllers.admin.TablesController.tablesIndex
POST        /admin/football/tables/league                                                           controllers.admin.TablesController.redirectToTable
GET         /admin/football/tables/league/:competitionId                                            controllers.admin.TablesController.leagueTable(competitionId: String)
GET         /admin/football/tables/league/:competitionId/:focus                                     controllers.admin.TablesController.leagueTableFragment(competitionId: String, focus: String)
GET         /admin/football/tables/league/:competitionId/:team1Id/:team2Id                          controllers.admin.TablesController.leagueTable2Teams(competitionId: String, team1Id: String, team2Id: String)
GET         /admin/football/fronts                                                                  controllers.admin.FrontsController.index
GET         /admin/football/fronts/live                                                             controllers.admin.FrontsController.matchDay
POST        /admin/football/fronts/results/redirect                                                 controllers.admin.FrontsController.resultsRedirect
GET         /admin/football/fronts/results/:competition                                             controllers.admin.FrontsController.results(competition: String)
POST        /admin/football/fronts/fixtures/redirect                                                controllers.admin.FrontsController.fixturesRedirect
GET         /admin/football/fronts/fixtures/:competition                                            controllers.admin.FrontsController.fixtures(competition: String)
POST        /admin/football/fronts/tables/redirect                                                  controllers.admin.FrontsController.tablesRedirect
GET         /admin/football/fronts/tables/:competition                                              controllers.admin.FrontsController.tables(competition: String)
GET         /admin/football/fronts/tables/:competition/:group                                       controllers.admin.FrontsController.groupTables(competition, group)
POST        /admin/football/fronts/matches/redirect                                                 controllers.admin.FrontsController.matchesRedirect
GET         /admin/football/fronts/matches/:competitionId                                           controllers.admin.FrontsController.chooseMatchForComp(competitionId)
GET         /admin/football/fronts/matches/:competitionId/:teamId                                   controllers.admin.FrontsController.chooseMatchForCompAndTeam(competitionId, teamId)
GET         /admin/football/fronts/matches/:competitionId/:team1Id/:team2Id                         controllers.admin.FrontsController.chooseMatchForCompAndTeams(competitionId, team1Id, team2Id)
GET         /admin/football/fronts/match/:matchId                                                   controllers.admin.FrontsController.bigMatchSpecial(matchId)

GET         /admin/football/api/squad/:teamId                                                       controllers.admin.PlayerController.squad(teamId: String)

# css reports
GET         /css-reports                                                                            controllers.admin.CssReportController.entry
GET         /css-reports.json                                                                       controllers.admin.CssReportController.index
GET         /css-reports/all.json                                                                   controllers.admin.CssReportController.aggregateReport
GET         /css-reports/:date.json                                                                 controllers.admin.CssReportController.report(date: LocalDate)
